package Ciencias.Managers;

/**
 * Manages uploading and downloading from Google Drive
 * @author Paul Alves
 * @version 3/23/2014
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.http.FileContent;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpResponse;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.Drive.Files;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;
import com.google.api.services.drive.model.ParentReference;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.List;

public class GoogleDriveManager {
  private static final String CLIENT_ID = "694783259053-dkma5ifs3lv01hvmurv2ujg8l72tj2a9.apps.googleusercontent.com";
  private static final String CLIENT_SECRET = "6fM0e3o9eOVDgdtcU2_E-Zdb";
  private static final String REDIRECT_URI = "urn:ietf:wg:oauth:2.0:oob";
  private static Drive service;
  private static HttpTransport httpTransport;
  private static JsonFactory jsonFactory;
  private static GoogleAuthorizationCodeFlow flow;
  /**
   * Generates an authorization URL for the user
   * @return The URL needed to get an activation code.
   */
  public static String generateSession(){

    httpTransport = new NetHttpTransport();
    jsonFactory = new JacksonFactory();
   
    flow = new GoogleAuthorizationCodeFlow.Builder(
    httpTransport, jsonFactory, CLIENT_ID, CLIENT_SECRET, Arrays.asList(DriveScopes.DRIVE)).setAccessType("online").setApprovalPrompt("auto").build();
    String url = flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI).build();
    return url;
  }

    /**
     * Creates a session for the user
     * @param code The code the user has received from generateSession
     * @throws IOException
     */
    public static void createService(String code) throws IOException{
  GoogleTokenResponse response = flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();
  GoogleCredential credential = new GoogleCredential().setFromTokenResponse(response);
  service = new Drive.Builder(httpTransport, jsonFactory, credential).setApplicationName("Ciencias Test Manager").build();
  }

    /**
     * Uploads the specified file to the specified folder.
     * @param fileContent The actual file to upload
     * @param title Name of this file including extension
     * @param folderId The folder ID of the folder to upload to, as generated by getFileID()
     * @throws IOException
     */
    public static void uploadFile(java.io.File fileContent, String title, String folderId) throws IOException{
    File body = new File();
    body.setTitle(title);
    body.setDescription("Ciencias Test Answers");
    body.setMimeType("text/plain");
    if (folderId != null && folderId.length() > 0) {
      body.setParents(
          Arrays.asList(new ParentReference().setId(folderId)));
    }
    FileContent mediaContent = new FileContent("text/plain", fileContent);
    service.files().insert(body, mediaContent).execute();
}

    /**
     * Returns the file's id with the specified title.
     * @param title the folder name to search for.
     * @return The list of files matching the query.
     * @throws IOException
     */
    public static String getFileID(String title) throws IOException{
   String q = "title = '" + title + "'"; 
   FileList execute = service.files().list().setQ(q).execute();
   List<File> items = execute.getItems();
 try{  return items.get(0).getId();}
 catch(IndexOutOfBoundsException e){return "Error";}
   }

    /**
     * 
     * @param folderId The folder to search
     * @return A list of all CTMA files in the current directory.
     * @throws IOException
     */
    public static List<File> getAllCTMAIds(String folderId) throws IOException{
    String q = "title contains ctma and \"" + folderId + "\" in parents";
   FileList execute = service.files().list().setQ(q).execute();
   List<File> items = execute.getItems();
   return items;
    }

    /**
     * Downloads a File
     * @param file The file instance
     * @return An inputStream of the file's content
     */
    public static InputStream downloadFile(File file) {
    if (file.getDownloadUrl() != null && file.getDownloadUrl().length() > 0) {
      try {
        HttpResponse resp =
            service.getRequestFactory().buildGetRequest(new GenericUrl(file.getDownloadUrl()))
                .execute();
        return resp.getContent();
      } catch (IOException e) {
        return null;
      }
    } else {
      // The file doesn't have any content stored on Drive.
      return null;
    }
  }
    
    
    
    /**
     * Creates a folder
     * @param folderName The name of the new folder
     * @param parentID The ID of the folder that the new folder will be created in
     * @return the ID of the new folder.
     * @throws IOException
     */
    public static String createFolder(String folderName, String parentID) throws IOException{
    File body = new File();
    body.setTitle(folderName);
    body.setMimeType("application/vnd.google-apps.folder");
    if (parentID != null && parentID.length() > 0) {
      body.setParents(
          Arrays.asList(new ParentReference().setId(parentID)));
    }
    File file = service.files().insert(body).execute();
   return file.getId();
 }
    
}
